"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mockServices = exports.mockWebSocket = exports.mockAjax = exports.injectNewToken = exports.injectClose = exports.mockServer = exports.mockActivity = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _rxjs = require("rxjs");

var _url = require("url");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// MOCK helpers
var notImplemented = function notImplemented() {
  throw new Error('not implemented');
}; // MOCK Activity


var mockActivity = function mockActivity(text) {
  return {
    type: 'message',
    from: {
      id: 'sender'
    },
    text: text
  };
}; // MOCK DirectLine Server (shared state used by Observable.ajax and WebSocket mocks)


exports.mockActivity = mockActivity;
var tokenPrefix = 'token';

var mockServer = function mockServer(scheduler) {
  return {
    scheduler: scheduler,
    conversation: {
      sockets: new Set(),
      conversationId: 'OneConversation',
      history: [],
      token: tokenPrefix + '1'
    }
  };
};

exports.mockServer = mockServer;

var tokenResponse = function tokenResponse(server, request) {
  var headers = request.headers;
  var authorization = headers['Authorization'];

  if (authorization === "Bearer ".concat(server.conversation.token)) {
    return null;
  }

  var response = {
    status: 403
  };
  return response;
};

var injectClose = function injectClose(server) {
  return server.conversation.sockets.forEach(function (s) {
    return s.onclose(new CloseEvent('close'));
  });
};

exports.injectClose = injectClose;

var injectNewToken = function injectNewToken(server) {
  var conversation = server.conversation;
  var suffix = Number.parseInt(conversation.token.substring(tokenPrefix.length), 10) + 1;
  conversation.token = tokenPrefix + suffix;
};

exports.injectNewToken = injectNewToken;
var keyWatermark = 'watermark';

// MOCK Observable.ajax (uses shared state in Server)
var mockAjax = function mockAjax(server, customAjax) {
  var uriBase = new _url.URL('https://directline.botframework.com/v3/directline/');

  var createStreamUrl = function createStreamUrl(watermark) {
    var uri = new _url.URL('conversations/stream', uriBase);

    if (watermark > 0) {
      var params = new _url.URLSearchParams();
      params.append(keyWatermark, watermark.toString(10));
      uri.search = params.toString();
    }

    return uri.toString();
  };

  var jax = customAjax || function (urlOrRequest) {
    if (typeof urlOrRequest === 'string') {
      throw new Error();
    }

    var uri = new _url.URL(urlOrRequest.url);
    var pathname = uri.pathname,
        searchParams = uri.searchParams;
    var parts = pathname.split('/');

    if (parts[3] === 'tokens' && parts[4] === 'refresh') {
      var response = {
        response: {
          token: server.conversation.token
        }
      };
      return response;
    }

    if (parts[3] !== 'conversations') {
      throw new Error();
    }

    if (parts.length === 4) {
      var conversation = {
        conversationId: server.conversation.conversationId,
        token: server.conversation.token,
        streamUrl: createStreamUrl(0)
      };
      var _response = {
        response: conversation
      };
      return _response;
    }

    if (parts[4] !== server.conversation.conversationId) {
      throw new Error();
    }

    if (parts[5] === 'activities') {
      var responseToken = tokenResponse(server, urlOrRequest);

      if (responseToken !== null) {
        return responseToken;
      }

      var activity = urlOrRequest.body;

      var _after = server.conversation.history.push(activity);

      var _start = _after - 1;

      var _iterator = _createForOfIteratorHelper(server.conversation.sockets),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var socket = _step.value;
          socket.play(_start, _after);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      var _response2 = {
        response: {
          id: 'messageId'
        }
      };
      return _response2;
    } else if (parts.length === 5) {
      var _responseToken = tokenResponse(server, urlOrRequest);

      if (_responseToken !== null) {
        return _responseToken;
      }

      var watermark = searchParams.get('watermark');

      var _start2 = Number.parseInt(watermark, 10);

      var _conversation = {
        conversationId: server.conversation.conversationId,
        token: server.conversation.token,
        streamUrl: createStreamUrl(_start2)
      };
      var _response3 = {
        response: _conversation
      };
      return _response3;
    }

    throw new Error();
  };

  var method = function method(urlOrRequest) {
    return new _rxjs.Observable(function (subscriber) {
      try {
        subscriber.next(jax(urlOrRequest));
        subscriber.complete();
      } catch (error) {
        subscriber.error(error);
      }
    });
  };

  var properties = {
    get: function get(url, headers) {
      return notImplemented();
    },
    post: function post(url, body, headers) {
      return notImplemented();
    },
    put: function put(url, body, headers) {
      return notImplemented();
    },
    patch: function patch(url, body, headers) {
      return notImplemented();
    },
    "delete": function _delete(url, headers) {
      return notImplemented();
    },
    getJSON: function getJSON(url, headers) {
      return notImplemented();
    }
  };
  return Object.assign(method, properties);
}; // MOCK WebSocket (uses shared state in Server)


exports.mockAjax = mockAjax;

var mockWebSocket = function mockWebSocket(server) {
  var _class, _temp;

  return _temp = _class = /*#__PURE__*/function () {
    function MockWebSocket(url, protocols) {
      var _this = this;

      (0, _classCallCheck2["default"])(this, MockWebSocket);
      (0, _defineProperty2["default"])(this, "binaryType", 'arraybuffer');
      (0, _defineProperty2["default"])(this, "bufferedAmount", 0);
      (0, _defineProperty2["default"])(this, "extensions", '');
      (0, _defineProperty2["default"])(this, "protocol", 'https');
      (0, _defineProperty2["default"])(this, "readyState", WebSocket.CLOSED);
      (0, _defineProperty2["default"])(this, "url", '');
      (0, _defineProperty2["default"])(this, "CLOSED", WebSocket.CLOSED);
      (0, _defineProperty2["default"])(this, "CLOSING", WebSocket.CLOSING);
      (0, _defineProperty2["default"])(this, "CONNECTING", WebSocket.CONNECTING);
      (0, _defineProperty2["default"])(this, "OPEN", WebSocket.OPEN);
      server.scheduler.schedule(function () {
        _this.readyState = WebSocket.CONNECTING;
        server.conversation.sockets.add(_this);

        _this.onopen(new Event('open'));

        _this.readyState = WebSocket.OPEN;
        var uri = new _url.URL(url);
        var watermark = uri.searchParams.get(keyWatermark);

        if (watermark !== null) {
          var _start3 = Number.parseInt(watermark, 10);

          _this.play(_start3, server.conversation.history.length);
        }
      });
    }

    (0, _createClass2["default"])(MockWebSocket, [{
      key: "play",
      value: function play(start, after) {
        var history = server.conversation.history;
        var activities = history.slice(start, after);
        var watermark = history.length.toString();
        var activityGroup = {
          activities: activities,
          watermark: watermark
        };
        var message = new MessageEvent('type', {
          data: JSON.stringify(activityGroup)
        });
        this.onmessage(message);
      }
    }, {
      key: "close",
      value: function close(code, reason) {
        this.readyState = WebSocket.CLOSING;
        this.onclose(new CloseEvent('close'));
        server.conversation.sockets["delete"](this);
        this.readyState = WebSocket.CLOSED;
      }
    }, {
      key: "send",
      value: function send(data) {}
    }, {
      key: "addEventListener",
      value: function addEventListener() {
        throw new Error();
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener() {
        throw new Error();
      }
    }, {
      key: "dispatchEvent",
      value: function dispatchEvent() {
        throw new Error();
      }
    }]);
    return MockWebSocket;
  }(), (0, _defineProperty2["default"])(_class, "CLOSED", WebSocket.CLOSED), (0, _defineProperty2["default"])(_class, "CLOSING", WebSocket.CLOSING), (0, _defineProperty2["default"])(_class, "CONNECTING", WebSocket.CONNECTING), (0, _defineProperty2["default"])(_class, "OPEN", WebSocket.OPEN), _temp;
}; // MOCK services (top-level aggregation of all mocks)


exports.mockWebSocket = mockWebSocket;

var mockServices = function mockServices(server, scheduler) {
  return {
    scheduler: scheduler,
    WebSocket: mockWebSocket(server),
    ajax: mockAjax(server),
    random: function random() {
      return 0;
    }
  };
};

exports.mockServices = mockServices;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,